
# Technical Architecture
- **Chrome Extension**: Manifest V3
<!-- - **Programming Language**: TypeScript (ES6, CommonJS) -->
- **Testing Frameworks**: Jest, Puppeteer
- **Build Tool**: Webpack
- **Linting Tool**: ESLint
- **Styling**: Tailwind CSS

# Formatting Rules
- **Indentation**: 4 spaces

# Core Principles
- **Abstract and Interface-Driven Design**: Define clear interfaces for key components, promoting abstraction and enabling dependency injection to ensure flexibility and ease of testing. This approach decouples code and enhances adaptability.
- **Modular and Decoupled Structure**: Structure the project into cohesive, self-contained modules to support scalability and ease of maintenance. Each module should have a well-defined purpose and communicate through interfaces.
- **Scalability and Maintainability**: Design the architecture with scalability in mind, ensuring that components can grow independently and be easily maintained or replaced.
- **Configuration Management**: Centralize configuration to manage environment-specific variables efficiently, simplifying deployment and runtime adjustments.
- **Error Handling and Logging**: Integrate comprehensive error handling to manage failures gracefully, paired with detailed logging to support debugging and monitoring.
- **Robust Testing Strategy**: Implement a thorough testing framework that includes unit, integration, and end-to-end tests. Prioritize automated tests to maintain code reliability and stability.
- **Code Quality and Standards**: Uphold high code quality through strict linting rules enforced by ESLint and formatting tools like Prettier. Ensure consistent code reviews and adherence to best practices.
- **Scalable Tooling**: Utilize scalable tools such as Webpack for efficient builds and optimize for performance and modularity.
- **Documentation and Maintainable Code**: Provide comprehensive documentation for interfaces and modules, ensuring future developers can understand and extend the codebase effortlessly.

